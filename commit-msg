#!/bin/sh

# Le format
# <type>(<portée>): <sujet>
# <description>
# <footer>
#
# Liste des types : 
#
# build: Système de build (example : gulp, webpack, npm)
# ci: Intégration continue (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# docs: Documentation
# feat: Ajout d'une fonctionnalité
# fix: Correction de bogue
# perf: Amélioration des performances
# refactor: Changement du code qui ne change rien au fonctionnement
# style: Changement du style du code (sans changer la logique)
# test: Modification des tests 
# lang: Gestion de la traduction
#
# Portée définit quelle partie de votre librairie / application est affectée par le commit (cette information est optionnelle)
#
# Sujet contient une description succinte des changements
# En utilisant l'impératif présent ("change", et non pas "changed" ou "changes")
# Sans majuscule au début
#
# Description permet de détailler plus en profondeur les motivations derrière le changement. Les règles sont les mêmes que pour la partie Sujet.
#
# Footer contient les changements importants (Breaking Changes) et les références à des issues GitHub / GitLab ou autre.
#
# https://www.grafikart.fr/formations/git/nommage-commit


regex="^(build|ci|docs|fix|feat|perf|refactor|style|test|lang)(\([a-z]+\))?:([\_a-zA-Z0-9\W\s]+)"
file=`cat $1`

if ! [[ $file =~ $regex ]]; then
  echo "ERROR - Commit message don't respect rules <type>(scope):<subject>."
  exit 1
else
  echo "Commit message ok"
fi